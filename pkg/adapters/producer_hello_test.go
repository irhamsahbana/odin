// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"github.com/segmentio/kafka-go"
	"github.com/stretchr/testify/mock"
	"testing"
	"github.com/stretchr/testify/assert"
	"gitlab.playcourt.id/nanang_suryadi/odin/pkg/infrastructure"
	"context"
)

type MockProducerHello struct {
	mock.Mock
}

func TestWithKafkaProducerHelloOpen(t *testing.T) {

	var (
		is      = assert.New(t)
		adapter = &Adapter{}
		MockProducerHello = &MockProducerHello{}
		)

	KafkaProducerHelloOpen = func(config kafka.WriterConfig) *kafka.Writer {
		return kafka.NewWriter(config)
	}
	
	infrastructure.Configuration(
		infrastructure.WithPath("../.."),
		infrastructure.WithFilename("config.yaml"),
	).Initialize()
	
	adapter.Sync(
		WithProducerHello(&ProducerHello{
			BrokerUrls: infrastructure.Envs.ProducerHello.BrokerUrls,
			Topic:      infrastructure.Envs.ProducerHello.Topic,
			ClientID:   infrastructure.Envs.ProducerHello.ClientID,
		}),
	)

	//define instance writer for testing
	producerHelloTest := KafkaProducerHelloOpen(kafka.WriterConfig{
		Brokers: []string{infrastructure.Envs.ProducerHello.BrokerUrls},
		Topic: infrastructure.Envs.ProducerHello.Topic,
	})

	// Send message to broker for testing purpose
	err := producerHelloTest.WriteMessages(context.Background(), kafka.Message{
		Key:   []byte("this-is-key-test"),
		Value: []byte("this-is-value-test"),
	})
	
	// Check if there is an error when writing message
	is.NoError(err) 

	// Call the adapter's UnSync method and check that the error return value is nil.
	is.Nil(adapter.UnSync())

	// Check that all expectations set on the mockClient have been met.
	MockProducerHello.AssertExpectations(t)
}
